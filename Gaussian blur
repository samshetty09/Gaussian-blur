1)gaussian blur
import cv2
import matplotlib.pyplot as plt
# Read the image in grayscale
image = cv2.imread('input_image.jpg', cv2.IMREAD_GRAYSCALE)
# Check if the image was loaded correctly
if image is None:
print("Error: Could not open or find the image.")
else:
# Apply Gaussian Blur with different kernel sizes
blur1 = cv2.GaussianBlur(image, (3, 3), 0) # Small blur
blur2 = cv2.GaussianBlur(image, (9, 9), 0) # Moderate blur
blur3 = cv2.GaussianBlur(image, (15, 15), 0) # Larger blur
# Display the original and blurred images side by side
plt.figure(figsize=(10, 8))
plt.subplot(2, 2, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.subplot(2, 2, 2)
plt.imshow(blur1, cmap='gray')
plt.title('Gaussian Blur (3x3)')
plt.axis('off')
plt.subplot(2, 2, 3)
plt.imshow(blur2, cmap='gray')
plt.title('Gaussian Blur (9x9)')
plt.axis('off')
plt.subplot(2, 2, 4)
plt.imshow(blur3, cmap='gray')
plt.title('Gaussian Blur (15x15)')
plt.axis('off')
plt.show()

2) Convert an Image to Grayscale with OpenCV
# OpenCV: The cv2.cvtColor() function is used to convert the image from its original color 
space (BGR) to grayscale.
import cv2
# Load an image
image = cv2.imread('F:/ODDSEM/BDA21CS71/BDANEW/Google.jpg')
# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# Save the grayscale image
cv2.imwrite('gray_image_opencv.jpg', gray_image)
# Display the grayscale image
cv2.imshow('Grayscale Image', gray_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
.
.
